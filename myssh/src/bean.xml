<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context 
				http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx 
				http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- 配置测试Spring -->
	<bean id="testService" class="com.sinolink.test.TestService">
		<property name="name" value="Test" />
	</bean>

	<!-- 引入我们的db.properties文件 -->
	<context:property-placeholder location="classpath:/db.properties"/>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${mysql.driverClassName}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="30" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="500" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
	</bean>

	<!-- 配置会话工厂() -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 设置数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 接管了hibernate对象映射文件 -->
		<property name="mappingResources">
			<list>
				<value>com/sinolink/domain/Employee.hbm.xml</value>
				<value>com/sinolink/domain/Department.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
				hibernate.hbm2ddl.auto=update
				hibernate.show_sql=true
				hibernate.format_sql=true
				hibernate.cache.use_second_level_cache=true
				hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
				hibernate.generate_statistics=true
			</value>
		</property>
	</bean>
	
	<!-- 配置EmployeeService对象
	<bean id="employeeServiceImpl" class="com.sinolink.service.impl.EmployeeServiceImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	 -->
	
	<!-- 配置DepartmentService对象 -->
	<bean id="departmentServiceImpl" class="com.sinolink.service.impl.DepartmentServiceImpl" />
	
	
	
	<!-- 通过注解的方式来配置EmployeeService 对象 -->
	<bean id="employeeServiceImpl" class="com.sinolink.service.impl.EmployeeServiceImpl" />

	<!-- 开启注解方式进行扫描 -->
	<context:annotation-config />

	<!-- 配置action的bean -->
	<bean name="/login" scope="prototype" class="com.sinolink.web.action.LoginAction" >
		<property name="employeeService" ref="employeeServiceImpl" />
	</bean>
	
	<!-- 配置action的bean -->
	<bean name="/employee" scope="prototype" class="com.sinolink.web.action.EmployeeAction">
		<property name="employeeService" ref="employeeServiceImpl" />
		<property name="departService" ref="employeeServiceImpl" />
	</bean>
	
	<!-- 配置事物管理，统一管理sessionFactory的事物 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 开启事物注解 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
</beans>